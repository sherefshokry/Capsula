//
//  MainHomeInteractor.swift
//  Capsula
//
//  Created SherifShokry on 2/2/20.
//  Copyright © 2020 SherifShokry. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Moya

class MainHomeInteractor : PresenterToIntetractorMainHomeProtocol {
    
    var presenter: InteractorToPresenterMainHomeProtocol?
    private let provider = MoyaProvider<HomeDataSource>()
    private let storesProvider = MoyaProvider<StoresDataSource>()

      func  getStoresData() {
          storesProvider.request(.getStoresData) { [weak self] result in
               guard let self = self else { return }
               switch result {
               case .success(let response):
                   do {
                    let storesResponse = try response.map(BaseResponse<StoresResponse>.self)
                    
                    self.presenter?.storesDataFetchedSuccessfully(storesResponse: storesResponse.data?.storesList ?? [])
                   } catch(let catchError) {
                       self.presenter?.storesDataFailedToFetch(error: catchError.localizedDescription)
                   }
               case .failure(let error):
                   do{
                       if let body = try error.response?.mapJSON(){
                           let errorData = (body as! [String:Any])
                           self.presenter?.storesDataFailedToFetch(error: (errorData["errors"] as? String) ?? "")
                       }
                   }catch{
                       self.presenter?.storesDataFailedToFetch(error: error.localizedDescription)
                   }
               }
           }
           
       }
      
    
    
    func updateUserData() {
        
        provider.request(.updateUserData) { [weak self] result in
              guard let self = self else { return }
              switch result {
              case .success(let response):
                  do {
                    let itemsResponse = try response.map(BaseResponse<ItemsResponse>.self).data ?? ItemsResponse()
                    
                      var updatedUser = Utils.loadUser() ?? UserResponse()
                    updatedUser.user?.cartContent = itemsResponse.itemsList ?? []
                    
                    Utils.saveUser(user: updatedUser)
                    Utils.updateUserCart(list: updatedUser.user?.cartContent ?? []) {
                    }
                                         
                    
                  } catch(let catchError) {
                      self.presenter?.homeDataFailedToFetch(error: catchError.localizedDescription)
                  }
              case .failure(let error):
                  do{
                      if let body = try error.response?.mapJSON(){
                          let errorData = (body as! [String:Any])
//                          self.presenter?.homeDataFailedToFetch(error: (errorData["errors"] as? String) ?? "")
                      }
                  }catch{
//                      self.presenter?.homeDataFailedToFetch(error: error.localizedDescription)
                  }
              }
          }
          
      }
    
    
    
    


}

