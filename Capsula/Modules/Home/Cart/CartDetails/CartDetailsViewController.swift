//
//  CartDetailsViewController.swift
//  Capsula
//
//  Created SherifShokry on 4/3/20.
//  Copyright © 2020 SherifShokry. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//
import UIKit
import ContentSheet
import KVNProgress
import SDWebImage
import Intercom

class CartDetailsViewController: ImagePickerViewController {
    
    
    
    var presenter : ViewToPresenterCartDetailsProtocol?
    @IBOutlet weak var addressDesc : UILabel!
    @IBOutlet weak var promoCodeBtn : UIButton!
    @IBOutlet weak var prescriptionImage : UIImageView!
    @IBOutlet weak var insuranceImage : UIImageView!
    @IBOutlet weak var prescriptionStackView : UIStackView!
    @IBOutlet weak var prescriptionStackViewHeight : NSLayoutConstraint!
    @IBOutlet weak var prescriptionImageStackViewHeight : NSLayoutConstraint!
    @IBOutlet weak var itemsCostLabel : UILabel!
    @IBOutlet weak var deliveryCostLabel : UILabel!
    @IBOutlet weak var estimatedTotalLabel : UILabel!
    var nextPressed: (()->())?
    var openPaymentScreen: (()->())?
    
    private var state: State = .loading {
        didSet {
            switch state {
            case .ready:
                KVNProgress.dismiss()
            case .loading:
                KVNProgress.show(withStatus: "", on: self.view)
            case .error(let error):
                KVNProgress.dismiss()
                self.showMessage(error)
            }
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        calcTotalPrice()
        
    }
    
    
    
    
    func calcTotalPrice() {
        let cartList = Utils.loadLocalCart() ?? []
        var totalPrice = 0.0
        cartList.forEach { (item) in
            if item.offerType == -1 {
                
                totalPrice = totalPrice + ((item.price ?? 0.0) * Double(item.itemQuantity ?? 1))
                
                
            }else{
                
                totalPrice = totalPrice + ((item.priceInOffer ?? 0.0) * Double(item.itemQuantity ?? 1))
                
                
            }
        }
        
        itemsCostLabel.text = Strings.RSD + " \(totalPrice)"
        deliveryCostLabel.text = Strings.RSD + " 0"
        estimatedTotalLabel.text = Strings.RSD + " \(totalPrice)"
        
    }
    
    
    
    
    
    func checkIfIsTreatment() -> Bool{
        
        let cartList = Utils.loadLocalCart()
        
        var isTreatment = false
        cartList?.forEach({ (item) in
            if (item.isTreatment ?? false){
                isTreatment = true
            }
        })
        
        return isTreatment
    }
    
    
    func setDefaultAddress(){
        let userDefaultAddress = Utils.loadUser().user?.defaultAddress ?? Address()
        addressDesc.text  = userDefaultAddress.addressDesc ?? ""
    }
    
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        setDefaultAddress()
        if (!checkIfIsTreatment()){
            //Hide Prescription
            prescriptionStackView.isHidden = true
            prescriptionStackViewHeight.constant = 0
            prescriptionImageStackViewHeight.constant = 0
            
        }else{
            
            prescriptionStackView.isHidden = false
            prescriptionStackViewHeight.constant = 145
            prescriptionImageStackViewHeight.constant = 72
            
        }
        
        if Utils.loadUser()?.accessToken ?? "" != "" {
            Intercom.setLauncherVisible(true)
        }
        
    }
    
    
    @IBAction func openPromoCodePressed(_ sender : UIButton){
        
        let content: ContentSheetContentProtocol
        let vc = PromoCodeViewController.instantiateFromStoryBoard(appStoryBoard: .Home)
        //               vc.filterType = filterType
        //               vc.applyFilterPressed = { filterType in
        //                   self.filterType = filterType
        //                   self.presenter?.setFilterType(type: filterType)
        //                   self.presenter?.setSearchText(searchText: self.searchField.text ?? "")
        //                   self.presenter?.itemsSearch()
        //               }
        let contentController = vc
        content = contentController
        let contentSheet = ContentSheet(content: content)
        contentSheet.blurBackground = false
        contentSheet.showDefaultHeader = false
        //        UIApplication.shared.windows[0].visibleViewController?.present( contentSheet, animated: true, completion: nil)
        
        
    }
    
    @IBAction func selectAddress(_ sender : UIButton){
        
        let content: ContentSheetContentProtocol
        let vc = AddressListViewController.instantiateFromStoryBoard(appStoryBoard: .Home)
        
        vc.refreshCheckoutAddress = {
            self.setDefaultAddress()
        }
        let contentController = vc
        content = contentController
        let contentSheet = ContentSheet(content: content)
        contentSheet.blurBackground = false
        contentSheet.showDefaultHeader = false
        UIApplication.shared.windows[0].visibleViewController?.present( contentSheet, animated: true, completion: nil)
        
        
        
    }
    
    
    @IBAction func selectPaymentMethod(_ sender : UIButton){
        
        
        //        let content: ContentSheetContentProtocol
        //        let vc = PaymentMethodViewController.instantiateFromStoryBoard(appStoryBoard: .Home)
        //        //                           vc.filterType = filterType
        //        //                           vc.applyFilterPressed = { filterType in
        //        //                               self.filterType = filterType
        //        //                               self.presenter?.setFilterType(type: filterType)
        //        //                               self.presenter?.setSearchText(searchText: self.searchField.text ?? "")
        //        //                               self.presenter?.itemsSearch()
        //        //                           }
        //        let contentController = vc
        //        content = contentController
        //        let contentSheet = ContentSheet(content: content)
        //        contentSheet.blurBackground = false
        //        contentSheet.showDefaultHeader = false
        //        UIApplication.shared.windows[0].visibleViewController?.present( contentSheet, animated: true, completion: nil)
        //
        
        
        if openPaymentScreen != nil {
            self.openPaymentScreen?()
        }
        
        
        
    }
    
    
    
    @IBAction func addPrescriptionPhotoPressed(_ sneder : UIButton){
        
        self.completion = { (imge , imgeString) in
            self.prescriptionImage.image = imge
            self.presenter?.setPreprictionImage(image: imge.toBase64() ?? "")
            self.completion = nil
        }
        self.openUploadImageBottomSheet(withTitle: Strings.chooseOption)
        
    }
    
    
    @IBAction func addInsurancePhotoPressed(_ sneder : UIButton){
        
        self.completion = { (imge , imgeString) in
            self.insuranceImage.image = imge
            self.presenter?.setInsuranceImage(image: imge.toBase64() ?? "")
            self.completion = nil
        }
        self.openUploadImageBottomSheet(withTitle: Strings.chooseOption)
        
    }
    
    
    
    
    @IBAction func nextPressed(_ sender : UIButton){
        self.presenter?.checkout()
    }
    
    
}
extension CartDetailsViewController : PresenterToViewCartDetailsProtocol {
    func moveToSuccessScreen() {
        
        if nextPressed != nil {
            self.nextPressed?()
        }
        
        
    }
    
    func changeState(state: State) {
        self.state = state
    }
    
    
    
}
