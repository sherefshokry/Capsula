//
//  ItemsListInteractor.swift
//  Capsula
//
//  Created SherifShokry on 2/15/20.
//  Copyright © 2020 SherifShokry. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Moya
class ItemsListInteractor : PresenterToIntetractorItemsListProtocol {
    
    var presenter: InteractorToPresenterItemsListProtocol?
    private let provider = MoyaProvider<ItemsDataSource>()
    private let cartProvider = MoyaProvider<CartDataSource>()
    
    
    func getItemsData(brandId : Int) {
        
        provider.request(.getItemsData(brandId)) { [weak self] result in
            guard let self = self else { return }
            switch result {
            case .success(let response):
                do {
                    
                    let itemsResponse = try response.map(BaseResponse<ItemsResponse>.self)
                    
                    self.presenter?.itemsDataFetchedSuccessfully(itemsResponse: itemsResponse.data?.itemsList ?? [])
                } catch(let catchError) {
                    self.presenter?.itemsDataFailedToFetch(error: catchError.localizedDescription)
                }
            case .failure(let error):
                do{
                    if let body = try error.response?.mapJSON(){
                        let errorData = (body as! [String:Any])
                        self.presenter?.itemsDataFailedToFetch(error: (errorData["errors"] as? String) ?? "")
                    }
                }catch{
                    self.presenter?.itemsDataFailedToFetch(error: error.localizedDescription)
                }
            }
        }
        
    }
    
    
    
    func addItemsToCart(itemData : Item){
        var cartItemsList = [CartItem]()
        var cartItem = CartItem()
        cartItem.mainId = itemData.mainId ?? -1
        cartItem.quantity = 1
        cartItemsList.append(cartItem)
          
        cartProvider.request(.addCart(cartItemsList)) { [weak self] result in
            guard let self = self else { return }
                switch result {
                            case .success(let response):
                                   do {
                            let itemsResponse = try response.map(BaseResponse<ItemsResponse>.self)
                            self.presenter?.itemsDataAddedToCartSuccessfully(itemsResponse: itemsResponse.data?.itemsList ?? [])
                                   } catch(let catchError) {
                                       self.presenter?.itemsDataFailedToFetch(error: catchError.localizedDescription)
                                   }
                               case .failure(let error):
                                   do{
                                       if let body = try error.response?.mapJSON(){
                                           let errorData = (body as! [String:Any])
                                           self.presenter?.itemsDataFailedToFetch(error: (errorData["errors"] as? String) ?? "")
                                       }
                                   }catch{
                                       self.presenter?.itemsDataFailedToFetch(error: error.localizedDescription)
                                   }
                               }
                           }
         }
    
    
    
    func getTopRatingItems() {
        provider.request(.getTopRatingItems) { [weak self] result in
            guard let self = self else { return }
            switch result {
            case .success(let response):
                do {
                    
                    let itemsResponse = try response.map(BaseResponse<ItemsResponse>.self)
                    
                    self.presenter?.itemsDataFetchedSuccessfully(itemsResponse: itemsResponse.data?.itemsList ?? [])
                } catch(let catchError) {
                    self.presenter?.itemsDataFailedToFetch(error: catchError.localizedDescription)
                }
            case .failure(let error):
                do{
                    if let body = try error.response?.mapJSON(){
                        let errorData = (body as! [String:Any])
                        self.presenter?.itemsDataFailedToFetch(error: (errorData["errors"] as? String) ?? "")
                    }
                }catch{
                    self.presenter?.itemsDataFailedToFetch(error: error.localizedDescription)
                }
            }
        }
        
    }
    
    
    func getBestSellerItems(){
        
        
        provider.request(.getTopSellingItems) { [weak self] result in
            guard let self = self else { return }
            switch result {
            case .success(let response):
                do {
                    
                    let itemsResponse = try response.map(BaseResponse<ItemsResponse>.self)
                    
                    self.presenter?.itemsDataFetchedSuccessfully(itemsResponse: itemsResponse.data?.itemsList ?? [])
                } catch(let catchError) {
                    self.presenter?.itemsDataFailedToFetch(error: catchError.localizedDescription)
                }
            case .failure(let error):
                do{
                    if let body = try error.response?.mapJSON(){
                        let errorData = (body as! [String:Any])
                        self.presenter?.itemsDataFailedToFetch(error: (errorData["errors"] as? String) ?? "")
                    }
                }catch{
                    self.presenter?.itemsDataFailedToFetch(error: error.localizedDescription)
                }
            }
        }
        
    }
    
    
    
    func getFreeDliveryItems(){
         
         
         provider.request(.getFreeDliveryITems) { [weak self] result in
             guard let self = self else { return }
             switch result {
             case .success(let response):
                 do {
                     
                     let itemsResponse = try response.map(BaseResponse<ItemsResponse>.self)
                     
                     self.presenter?.itemsDataFetchedSuccessfully(itemsResponse: itemsResponse.data?.itemsList ?? [])
                 } catch(let catchError) {
                     self.presenter?.itemsDataFailedToFetch(error: catchError.localizedDescription)
                 }
             case .failure(let error):
                 do{
                     if let body = try error.response?.mapJSON(){
                         let errorData = (body as! [String:Any])
                         self.presenter?.itemsDataFailedToFetch(error: (errorData["errors"] as? String) ?? "")
                     }
                 }catch{
                     self.presenter?.itemsDataFailedToFetch(error: error.localizedDescription)
                 }
             }
         }
         
     }
    
    
    
    func getItemsData(categoryId : Int) {
        
        provider.request(.getItemsDataWithCategoryId(categoryId)) { [weak self] result in
            guard let self = self else { return }
            switch result {
            case .success(let response):
                do {
                    
                    let itemsResponse = try response.map(BaseResponse<ItemsResponse>.self)
                    
                    self.presenter?.itemsDataFetchedSuccessfully(itemsResponse: itemsResponse.data?.itemsList ?? [])
                } catch(let catchError) {
                    self.presenter?.itemsDataFailedToFetch(error: catchError.localizedDescription)
                }
            case .failure(let error):
                do{
                    if let body = try error.response?.mapJSON(){
                        let errorData = (body as! [String:Any])
                        self.presenter?.itemsDataFailedToFetch(error: (errorData["errors"] as? String) ?? "")
                    }
                }catch{
                    self.presenter?.itemsDataFailedToFetch(error: error.localizedDescription)
                }
            }
        }
        
    }
    
    
    
    
    func getItemsData(categoryId : Int,storeId: Int)  {
        
        provider.request(.getItemsDataWithStoreId(categoryId, storeId)) { [weak self] result in
            guard let self = self else { return }
            switch result {
            case .success(let response):
                do {
                    
                    let itemsResponse = try response.map(BaseResponse<ItemsResponse>.self)
                    
                    self.presenter?.itemsDataFetchedSuccessfully(itemsResponse: itemsResponse.data?.itemsList ?? [])
                } catch(let catchError) {
                    self.presenter?.itemsDataFailedToFetch(error: catchError.localizedDescription)
                }
            case .failure(let error):
                do{
                    if let body = try error.response?.mapJSON(){
                        let errorData = (body as! [String:Any])
                        self.presenter?.itemsDataFailedToFetch(error: (errorData["errors"] as? String) ?? "")
                    }
                }catch{
                    self.presenter?.itemsDataFailedToFetch(error: error.localizedDescription)
                }
            }
        }
        
    }
    
    
    
}

